const string = require('@barchart/common-js/lang/string');

const formatPrice = require('./../../../../lib/utilities/format/price');

// 2021/07/12, BRI. These tests are based on mapping tables (between decimal
// values and expected fractional representations) published by the CME:
//
// https://www.cmegroup.com/confluence/display/EPICSANDBOX/Fractional+Pricing+-+Tick+and+Decimal+Conversions
//
// See maps (with explanations) below ...

describe('when formatting decimals as ticks', () => {
	it('should be formatted correctly (each tick = 1/32, e.g. root=ZB)', () => {
		const rules = THIRTY_SECONDS;
		const code = '4';

		rules.forEach((rule) => {
			const decimal = rule[1];
			const expected = `0-${string.padLeft(rule[0].toString(), 2, '0')}`;

			expect(formatPrice(decimal, code, '-', true)).toEqual(expected);
		});
	});

	it('should be formatted correctly (each tick = 1/2 of a 1/32, e.g. root=ZN)', () => {
		const rules = HALVES_OF_THIRTY_SECONDS;
		const code = '5';

		rules.forEach((rule) => {
			const decimal = rule[1];
			const expected = `0-${string.padLeft(rule[0].toString(), 3, '0')}`;

			expect(formatPrice(decimal, code, '-', true)).toEqual(expected);
		});
	});

	it('should be formatted correctly (each tick = 1/4 of a 1/32, e.g. root=ZF)', () => {
		const rules = QUARTERS_OF_THIRTY_SECONDS;
		const code = '5';

		rules.forEach((rule) => {
			const decimal = rule[1];
			const expected = `0-${string.padLeft(rule[0].toString(), 3, '0')}`;

			expect(formatPrice(decimal, code, '-', true)).toEqual(expected);
		});
	});
	
	it('should be formatted correctly (each tick = 1/8 of a 1/32, e.g. root=ZT)', () => {
		const rules = EIGHTHS_OF_THIRTY_SECONDS;
		const code = '7';

		rules.forEach((rule) => {
			const decimal = rule[1];
			const expected = `0-${string.padLeft(rule[0].toString(), 3, '0')}`;

			expect(formatPrice(decimal, code, '-', true)).toEqual(expected);
		});
	});
});

const THIRTY_SECONDS = [
	// 1/32nd = 0-01 (numerator shown, denominator implied) = 1/32 = 0.3125,
	// 2/32nd = 0-02 (numerator shown, denominator implied) = 2/32 = 0.0625...

	[0,0],
	[1,0.03125],
	[2,0.0625],
	[3,0.09375],
	[4,0.125],
	[5,0.15625],
	[6,0.1875],
	[7,0.21875],
	[8,0.25],
	[9,0.28125],
	[10,0.3125],
	[11,0.34375],
	[12,0.375],
	[13,0.40625],
	[14,0.4375],
	[15,0.46875],
	[16,0.5],
	[17,0.53125],
	[18,0.5625],
	[19,0.59375],
	[20,0.625],
	[21,0.65625],
	[22,0.6875],
	[23,0.71875],
	[24,0.75],
	[25,0.78125],
	[26,0.8125],
	[27,0.84375],
	[28,0.875],
	[29,0.90625],
	[30,0.9375],
	[31,0.96875]
];

const HALVES_OF_THIRTY_SECONDS = [
	// 0/32nds + 1/2 of a 32nd = 0.5/32nd = 0-005 (numerator shown without decimal point, denominator implied) = 0.5/32 = 0.015625,
	// 1/32nds + 0/2 of a 32nd = 1.0/32nd = 0-010 (numerator shown without decimal point, denominator implied) = 1/32 = 0.32125,
	// 1/32nds + 1/2 of a 32nd = 1.5/32nd = 0-015 (numerator shown without decimal point, denominator implied) = 1.5/32 = 0.046875...

	[0,0],
	[5,0.015625],
	[10,0.03125],
	[15,0.046875],
	[20,0.0625],
	[25,0.078125],
	[30,0.09375],
	[35,0.109375],
	[40,0.125],
	[45,0.140625],
	[50,0.15625],
	[55,0.171875],
	[60,0.1875],
	[65,0.203125],
	[70,0.21875],
	[75,0.234375],
	[80,0.25],
	[85,0.265625],
	[90,0.28125],
	[95,0.296875],
	[100,0.3125],
	[105,0.328125],
	[110,0.34375],
	[115,0.359375],
	[120,0.375],
	[125,0.390625],
	[130,0.40625],
	[135,0.421875],
	[140,0.4375],
	[145,0.453125],
	[150,0.46875],
	[155,0.484375],
	[160,0.5],
	[165,0.515625],
	[170,0.53125],
	[175,0.546875],
	[180,0.5625],
	[185,0.578125],
	[190,0.59375],
	[195,0.609375],
	[200,0.625],
	[205,0.640625],
	[210,0.65625],
	[215,0.671875],
	[220,0.6875],
	[225,0.703125],
	[230,0.71875],
	[235,0.734375],
	[240,0.75],
	[245,0.765625],
	[250,0.78125],
	[255,0.796875],
	[260,0.8125],
	[265,0.828125],
	[270,0.84375],
	[275,0.859375],
	[280,0.875],
	[285,0.890625],
	[290,0.90625],
	[295,0.921875],
	[300,0.9375],
	[305,0.953125],
	[310,0.96875],
	[315,0.984375]
];

const QUARTERS_OF_THIRTY_SECONDS = [
	// 0/32nds + 1/4 of a 32nd = 0.25/32nd = 0-002[5] = 0-002 (numerator shown without decimal point and omitting last digit, denominator implied) = 0.25/32 = 0.0078125,
	// 0/32nds + 2/4 of a 32nd = 0.50/32nd = 0-005[0] = 0-005 (numerator shown without decimal point and omitting last digit, denominator implied) = 0.50/32 = 0.015625,
	// 0/32nds + 3/4 of a 32nd = 0.75/32nd = 0-007[5] = 0-007 (numerator shown without decimal point and omitting last digit, denominator implied) = 0.75/32 = 0.0234375,
	// 1/32nds + 0/4 of a 32nd = 1.00/32nd = 0-010[0] = 0-010 (numerator shown without decimal point and omitting last digit, denominator implied) = 1/32 = 0.03125,
	// 1/32nds + 1/4 of a 32nd = 1.25/32nd = 0-012[5] = 0-012 (numerator shown without decimal point and omitting last digit, denominator implied) = 1.25/32 = 0.0390625 ...

	[0,0],
	[2,0.0078125],
	[5,0.015625],
	[7,0.0234375],
	[10,0.03125],
	[12,0.0390625],
	[15,0.046875],
	[17,0.0546875],
	[20,0.0625],
	[22,0.0703125],
	[25,0.078125],
	[27,0.0859375],
	[30,0.09375],
	[32,0.1015625],
	[35,0.109375],
	[37,0.1171875],
	[40,0.125],
	[42,0.1328125],
	[45,0.140625],
	[47,0.1484375],
	[50,0.15625],
	[52,0.1640625],
	[55,0.171875],
	[57,0.1796875],
	[60,0.1875],
	[62,0.1953125],
	[65,0.203125],
	[67,0.2109375],
	[70,0.21875],
	[72,0.2265625],
	[75,0.234375],
	[77,0.2421875],
	[80,0.25],
	[82,0.2578125],
	[85,0.265625],
	[87,0.2734375],
	[90,0.28125],
	[92,0.2890625],
	[95,0.296875],
	[97,0.3046875],
	[100,0.3125],
	[102,0.3203125],
	[105,0.328125],
	[107,0.3359375],
	[110,0.34375],
	[112,0.3515625],
	[115,0.359375],
	[117,0.3671875],
	[120,0.375],
	[122,0.3828125],
	[125,0.390625],
	[127,0.3984375],
	[130,0.40625],
	[132,0.4140625],
	[135,0.421875],
	[137,0.4296875],
	[140,0.4375],
	[142,0.4453125],
	[145,0.453125],
	[147,0.4609375],
	[150,0.46875],
	[152,0.4765625],
	[155,0.484375],
	[157,0.4921875],
	[160,0.5],
	[162,0.5078125],
	[165,0.515625],
	[167,0.5234375],
	[170,0.53125],
	[172,0.5390625],
	[175,0.546875],
	[177,0.5546875],
	[180,0.5625],
	[182,0.5703125],
	[185,0.578125],
	[187,0.5859375],
	[190,0.59375],
	[192,0.6015625],
	[195,0.609375],
	[197,0.6171875],
	[200,0.625],
	[202,0.6328125],
	[205,0.640625],
	[207,0.6484375],
	[210,0.65625],
	[212,0.6640625],
	[215,0.671875],
	[217,0.6796875],
	[220,0.6875],
	[222,0.6953125],
	[225,0.703125],
	[227,0.7109375],
	[230,0.71875],
	[232,0.7265625],
	[235,0.734375],
	[237,0.7421875],
	[240,0.75],
	[242,0.7578125],
	[245,0.765625],
	[247,0.7734375],
	[250,0.78125],
	[252,0.7890625],
	[255,0.796875],
	[257,0.8046875],
	[260,0.8125],
	[262,0.8203125],
	[265,0.828125],
	[267,0.8359375],
	[270,0.84375],
	[272,0.8515625],
	[275,0.859375],
	[277,0.8671875],
	[280,0.875],
	[282,0.8828125],
	[285,0.890625],
	[287,0.8984375],
	[290,0.90625],
	[292,0.9140625],
	[295,0.921875],
	[297,0.9296875],
	[300,0.9375],
	[302,0.9453125],
	[305,0.953125],
	[307,0.9609375],
	[310,0.96875],
	[312,0.9765625],
	[315,0.984375],
	[317,0.9921875]
];

const EIGHTHS_OF_THIRTY_SECONDS = [
	// 0/32nds + 1/8 of a 32nd = 0.125/32nd = 0-001[25] = 0-001 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 0.125/32 = 0.00390625,
	// 0/32nds + 2/8 of a 32nd = 0.250/32nd = 0-002[50] = 0-002 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 0.250/32 = 0.0078125,
	// 0/32nds + 3/8 of a 32nd = 0.75/32nd = 0-003[75] = 0-003 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 0.375/32 = 0.01171875,
	// 0/32nds + 4/8 of a 32nd = 1.00/32nd = 0-005[00] = 0-005 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 0.500/32 = 0.015625,
	// 0/32nds + 5/8 of a 32nd = 1.25/32nd = 0-006[25] = 0-006 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 0.625/32 = 0.01953125,
	// 0/32nds + 6/8 of a 32nd = 0.25/32nd = 0-007[50] = 0-007 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 0.750/32 = 0.0234375,
	// 0/32nds + 7/8 of a 32nd = 0.50/32nd = 0-008[75] = 0-008 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 0.875/32 = 0.02734375,
	// 0/32nds + 0/8 of a 32nd = 0.75/32nd = 0-010[00] = 0-010 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 1.000/32 = 0.03125,
	// 0/32nds + 1/8 of a 32nd = 1.00/32nd = 0-011[25] = 0-011 (numerator shown without decimal point and omitting last digit(s), denominator implied) = 1.125/32 = 0.03515625...

	[0,0],
	[1,0.00390625],
	[2,0.0078125],
	[3,0.01171875],
	[5,0.015625],
	[6,0.01953125],
	[7,0.0234375],
	[8,0.02734375],
	[10,0.03125],
	[11,0.03515625],
	[12,0.0390625],
	[13,0.04296875],
	[15,0.046875],
	[16,0.05078125],
	[17,0.0546875],
	[18,0.05859375],
	[20,0.0625],
	[21,0.06640625],
	[22,0.0703125],
	[23,0.07421875],
	[25,0.078125],
	[26,0.08203125],
	[27,0.0859375],
	[28,0.08984375],
	[30,0.09375],
	[31,0.09765625],
	[32,0.1015625],
	[33,0.10546875],
	[35,0.109375],
	[36,0.11328125],
	[37,0.1171875],
	[38,0.12109375],
	[40,0.125],
	[41,0.12890625],
	[42,0.1328125],
	[43,0.13671875],
	[45,0.140625],
	[46,0.14453125],
	[47,0.1484375],
	[48,0.15234375],
	[50,0.15625],
	[51,0.16015625],
	[52,0.1640625],
	[53,0.16796875],
	[55,0.171875],
	[56,0.17578125],
	[57,0.1796875],
	[58,0.18359375],
	[60,0.1875],
	[61,0.19140625],
	[62,0.1953125],
	[63,0.19921875],
	[65,0.203125],
	[66,0.20703125],
	[67,0.2109375],
	[68,0.21484375],
	[70,0.21875],
	[71,0.22265625],
	[72,0.2265625],
	[73,0.23046875],
	[75,0.234375],
	[76,0.23828125],
	[77,0.2421875],
	[78,0.24609375],
	[80,0.25],
	[81,0.25390625],
	[82,0.2578125],
	[83,0.26171875],
	[85,0.265625],
	[86,0.26953125],
	[87,0.2734375],
	[88,0.27734375],
	[90,0.28125],
	[91,0.28515625],
	[92,0.2890625],
	[93,0.29296875],
	[95,0.296875],
	[96,0.30078125],
	[97,0.3046875],
	[98,0.30859375],
	[100,0.3125],
	[101,0.31640625],
	[102,0.3203125],
	[103,0.32421875],
	[105,0.328125],
	[106,0.33203125],
	[107,0.3359375],
	[108,0.33984375],
	[110,0.34375],
	[111,0.34765625],
	[112,0.3515625],
	[113,0.35546875],
	[115,0.359375],
	[116,0.36328125],
	[117,0.3671875],
	[118,0.37109375],
	[120,0.375],
	[121,0.37890625],
	[122,0.3828125],
	[123,0.38671875],
	[125,0.390625],
	[126,0.39453125],
	[127,0.3984375],
	[128,0.40234375],
	[130,0.40625],
	[131,0.41015625],
	[132,0.4140625],
	[133,0.41796875],
	[135,0.421875],
	[136,0.42578125],
	[137,0.4296875],
	[138,0.43359375],
	[140,0.4375],
	[141,0.44140625],
	[142,0.4453125],
	[143,0.44921875],
	[145,0.453125],
	[146,0.45703125],
	[147,0.4609375],
	[148,0.46484375],
	[150,0.46875],
	[151,0.47265625],
	[152,0.4765625],
	[153,0.48046875],
	[155,0.484375],
	[156,0.48828125],
	[157,0.4921875],
	[158,0.49609375],
	[160,0.5],
	[161,0.50390625],
	[162,0.5078125],
	[163,0.51171875],
	[165,0.515625],
	[166,0.51953125],
	[167,0.5234375],
	[168,0.52734375],
	[170,0.53125],
	[171,0.53515625],
	[172,0.5390625],
	[173,0.54296875],
	[175,0.546875],
	[176,0.55078125],
	[177,0.5546875],
	[178,0.55859375],
	[180,0.5625],
	[181,0.56640625],
	[182,0.5703125],
	[183,0.57421875],
	[185,0.578125],
	[186,0.58203125],
	[187,0.5859375],
	[188,0.58984375],
	[190,0.59375],
	[191,0.59765625],
	[192,0.6015625],
	[193,0.60546875],
	[195,0.609375],
	[196,0.61328125],
	[197,0.6171875],
	[198,0.62109375],
	[200,0.625],
	[201,0.62890625],
	[202,0.6328125],
	[203,0.63671875],
	[205,0.640625],
	[206,0.64453125],
	[207,0.6484375],
	[208,0.65234375],
	[210,0.65625],
	[211,0.66015625],
	[212,0.6640625],
	[213,0.66796875],
	[215,0.671875],
	[216,0.67578125],
	[217,0.6796875],
	[218,0.68359375],
	[220,0.6875],
	[221,0.69140625],
	[222,0.6953125],
	[223,0.69921875],
	[225,0.703125],
	[226,0.70703125],
	[227,0.7109375],
	[228,0.71484375],
	[230,0.71875],
	[231,0.72265625],
	[232,0.7265625],
	[233,0.73046875],
	[235,0.734375],
	[236,0.73828125],
	[237,0.7421875],
	[238,0.74609375],
	[240,0.75],
	[241,0.75390625],
	[242,0.7578125],
	[243,0.76171875],
	[245,0.765625],
	[246,0.76953125],
	[247,0.7734375],
	[248,0.77734375],
	[250,0.78125],
	[251,0.78515625],
	[252,0.7890625],
	[253,0.79296875],
	[255,0.796875],
	[256,0.80078125],
	[257,0.8046875],
	[258,0.80859375],
	[260,0.8125],
	[261,0.81640625],
	[262,0.8203125],
	[263,0.82421875],
	[265,0.828125],
	[266,0.83203125],
	[267,0.8359375],
	[268,0.83984375],
	[270,0.84375],
	[271,0.84765625],
	[272,0.8515625],
	[273,0.85546875],
	[275,0.859375],
	[276,0.86328125],
	[277,0.8671875],
	[278,0.87109375],
	[280,0.875],
	[281,0.87890625],
	[282,0.8828125],
	[283,0.88671875],
	[285,0.890625],
	[286,0.89453125],
	[287,0.8984375],
	[288,0.90234375],
	[290,0.90625],
	[291,0.91015625],
	[292,0.9140625],
	[293,0.91796875],
	[295,0.921875],
	[296,0.92578125],
	[297,0.9296875],
	[298,0.93359375],
	[300,0.9375],
	[301,0.94140625],
	[302,0.9453125],
	[303,0.94921875],
	[305,0.953125],
	[306,0.95703125],
	[307,0.9609375],
	[308,0.96484375],
	[310,0.96875],
	[311,0.97265625],
	[312,0.9765625],
	[313,0.98046875],
	[315,0.984375],
	[316,0.98828125],
	[317,0.9921875],
	[318,0.99609375]
];
