/**
 * A namespace for enumerations.
 *
 * @namespace Enums
 */

/**
 * A meta namespace containing signatures of anonymous functions.
 *
 * @namespace Callbacks
 */

/**
 * The signature of a function which accepts events generated by an
 * **Events** subscription (see {@link Enums.SubscriptionType}).
 *
 * @public
 * @callback EventsCallback
 * @memberOf Callbacks
 * @param {Schema.EventsEvent} event
 */

/**
 * The signature of a function which accepts events generated by a
 * **Timestamp** subscription (see {@link Enums.SubscriptionType}).
 *
 * @public
 * @callback TimestampCallback
 * @memberOf Callbacks
 * @param {Date} event
 */

/**
 * The signature of a function which accepts events generated by a
 * **MarketUpdate** subscription (see {@link Enums.SubscriptionType}).
 *
 * @public
 * @callback MarketUpdateCallback
 * @memberOf Callbacks
 * @param {Schema.MarketUpdateEvent} event
 */

/**
 * The signature of a function which accepts events generated by a
 * **MarketDepth** subscription (see {@link Enums.SubscriptionType}).
 *
 * @public
 * @callback MarketDepthCallback
 * @memberOf Callbacks
 * @param {Schema.MarketDepthEvent} event
 */

/**
 * The signature of a function which accepts events generated by a
 * **CumulativeVolume** subscription (see {@link Enums.SubscriptionType}).
 *
 * @public
 * @callback CumulativeVolumeCallback
 * @memberOf Callbacks
 * @param {Schema.CumulativeVolumeEvent} event
 */

/**
 * A meta namespace containing structural contracts of anonymous objects.
 *
 * @namespace Schema
 */

/**
 * The object passed to a {@link Callbacks.EventsCallback}.
 *
 * @typedef EventsEvent
 * @type Object
 * @memberOf Schema
 * @property {Enums.ConnectionEventType} event - The event type.
 */

/**
 * The object passed to a {@link Callbacks.MarketUpdateCallback}. This object
 * represents a change to the {@link Quote} state. It could be a trade, a
 * change to the top of book, etc.
 *
 * @typedef MarketUpdateEvent
 * @type Object
 * @memberOf Schema
 * @property {string} symbol - The symbol.
 * @property {string} type - The message type (e.g. 'TRADE')
 */

/**
 * The object passed to a {@link Callbacks.MarketDepthCallback}. This object represents
 * an aggregated order book. In other words, the total size of all orders (bid and ask) at
 * every price.
 *
 * @typedef MarketDepthEvent
 * @type Object
 * @memberOf Schema
 * @property {string} symbol - The symbol.
 * @property {Schema.MarketDepthLevel[]} bids - The price levels for buy orders.
 * @property {Schema.MarketDepthLevel[]} asks - The price levels for sell orders.
 */

/**
 * The definition of one price level within the *bids* or *asks* array of a
 * {@link Schema.MarketDepthEvent}.
 *
 * @typedef MarketDepthLevel
 * @type Object
 * @memberOf Schema
 * @property {number} price - The price level.
 * @property {number} size - The quantity available at the price level.
 */

/**
 * The object passed to a {@link Callbacks.CumulativeVolumeCallback}.
 *
 * @typedef CumulativeVolumeEvent
 * @type Object
 * @memberOf Schema
 * @property {String} event - Either "update" or "reset".
 * @property {CumulativeVolume} container - Complete cumulative volume state.
 * @property {number=} price - The price level (for "update" events only).
 * @property {number=} volume - The  new aggregate volume (for "update" events only).
 */